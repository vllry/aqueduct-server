#!/usr/bin/python3

from bottle import route, run, request#, static_file, abort
import json
from os import getuid, mkdir
from threading import Thread

from aqueductdatabase import add_job, mark_all_builders_offline
import libaqueductserver as aqueduct



conf = aqueduct.config()



@route('/', method='GET')
def get_info():
	info = {
		'service': 'aqueduct-server',
		'version': conf.general['version']
		}
	return json.dumps(info)



@route('/callback', method='POST')
def handle_callback():
	jobid = request.forms.get('jobid')
	arch = request.forms.get('arch')
	operatingsystem = request.forms.get('os')
	release = request.forms.get('release')
	success = request.forms.get('success')
	location = request.forms.get('location')
	if not (jobid and arch and operatingsystem and release and success and location):
		return {'success':False, 'message':'Missing parameters'}

	if success == '1':
		aqueduct.task_done(jobid, arch, operatingsystem, release)
	else:
		aqueduct.task_failed(jobid, arch, operatingsystem, release)

	return {'success': True, 'message': 'Callback recieved'}



@route('/submit', method='POST')
def build_submit():
	upload = request.files.data

	if not upload or not upload.file:
		return {'success': False, 'message': 'No file supplied'}

	jobid = add_job()
	mkdir(conf.general['dir']['intake']+str(jobid))
	upload.save(conf.general['dir']['intake'] + str(jobid))
	conf.print('info', 'New package submitted, given jobid %s' % (jobid))

	t = Thread(target=aqueduct.intake, args=(conf,jobid,conf.general['dir']['intake'] + str(jobid) + '/' + upload.filename))
	t.start()

	return {
		'success': True,
		'message': 'Source submitted'
	}



if getuid() == 0:
	mark_all_builders_offline()
	run(host='', port=conf.general['port'], debug=True)
else:
	print('Please run aqueduct-server as root')
